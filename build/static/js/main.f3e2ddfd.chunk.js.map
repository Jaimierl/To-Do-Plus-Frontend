{"version":3,"sources":["LoginButton.js","LogoutButton.js","Header.js","Components/AddTDItem.js","Components/UpdateTask.js","Components/TDItems.js","Components/Starburst.js","Components/Calendar.js","Components/Main.js","Components/headshots/Chris.jfif","Components/headshots/Jae.jpg","Components/headshots/Anthony.jpg","Components/AboutMe.js","ToDoPlus.png","App.js","index.js"],"names":["LoginButton","clientId","buttonText","onSuccess","this","props","resGoogle","onFailure","cookiePolicy","React","Component","LogoutButton","Button","onClick","onLogout","Header","Navbar","collapseOnSelect","expand","bg","variant","className","Brand","NavItem","to","userName","style","color","withAuth0","AddTDItem","handleSubmit","e","a","preventDefault","newTask","summary","target","value","description","occupation","state","busyTime","addToServer","newTaskData","calendarRef","current","getApi","addEvent","id","_id","title","allDay","evt","validity","valid","prompt","setState","Form","onSubmit","Card","width","Body","Group","Label","Control","type","placeholder","input","pattern","onInput","handleNumber","bind","UpdateTask","event","console","log","calendarApi","newObj","updatedObj","time","handleUpdate","getEventById","setProp","unselect","closeUpdate","Modal","show","showUpdate","onHide","closeButton","Dialog","controlId","defaultValue","as","rows","TDItems","runUpdateForm","item","updateformHandler","toDoList","map","tDThing","border","Title","Text","deleteToDo","Starburst","kitKat","array","push","rolos","minutos","i","length","twix","horas","Math","ceil","progress","updateEverything","everything","labels","datasets","label","data","backgroundColor","borderColor","borderWidth","renderEventContent","eventInfo","timeText","Calendar","weekendsVisible","currentEvents","createRef","calendar","plugins","googleCalendarPlugin","googleCalendarApiKey","events","googleCalendarId","googleState","email","handleWeekendsToggle","handleDateSelect","selectInfo","handleEventClick","clickInfo","handleEvents","updateCalendarRef","renderSidebar","dayGridPlugin","timeGridPlugin","interactionPlugin","headerToolbar","left","center","right","initialView","editable","selectable","selectMirror","dayMaxEvents","weekends","select","eventContent","eventClick","eventsSet","eventDisplay","themeSystem","ref","href","Main","Container","fluid","Row","Col","md","timeZone","getEventsServer","AboutMe","Image","src","Chris","rounded","Jae","Anthony","App","URL","process","handleStartDateTime","date","startDateTime","handleEndDateTime","endDateTime","res","accessToken","tokenObj","access_token","google","profileObj","itemObj","updateForm","url","axios","get","then","eventObj","catch","error","message","TDThing","post","putObj","location","start","dateTime","end","put","updatedTask","deleteFromServer","passedId","delete","deletedEvent","deletedEventData","copyState","filteredEvents","filter","remove","user","Date","name","exact","path","ToDoPlus","ReactDOM","render","domain","redirectUri","window","origin","async","defer","document","getElementById"],"mappings":"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","file":"static/js/main.f3e2ddfd.chunk.js","sourcesContent":["import React from 'react';\n// import { Button } from 'react-bootstrap'\n// import { withAuth0 } from '@auth0/auth0-react';\nimport GoogleLogin from 'react-google-login';\n\nclass LoginButton extends React.Component {\n\n\n\n    render() {\n        return (\n            <>\n                <GoogleLogin\n                    clientId='800440768090-n9kc75hsra6cfeq27kvu0fhgc90d1cbb.apps.googleusercontent.com'\n                    buttonText='Login'\n                    onSuccess={this.props.resGoogle}\n                    onFailure={this.props.resGoogle}\n                    cookiePolicy={'single_host_origin'}\n\n                />\n            </>\n        )\n    }\n}\n\nexport default LoginButton;","import React from 'react';\n\nimport { Button } from 'react-bootstrap'\n// import { withAuth0 } from '@auth0/auth0-react';\n \n\nclass LogoutButton extends React.Component {\n\n\n\n    render() {\n        return(\n            <>\n            <Button onClick={() => this.props.onLogout()}>Logout</Button>\n            </>\n\n        )\n    }\n\n}\n\nexport default LogoutButton;","import React from 'react';\nimport { Navbar, NavItem } from 'react-bootstrap';\n// import Button from 'react-bootstrap/Button';\nimport { Link } from \"react-router-dom\";\nimport './Header.css';\nimport './LoginButton';\nimport LoginButton from './LoginButton';\nimport LogoutButton from './LogoutButton';\nimport { withAuth0 } from '@auth0/auth0-react';\n\nclass Header extends React.Component {\n    render() {\n        return (\n            <Navbar collapseOnSelect expand=\"lg\" bg=\"dark\" variant=\"dark\" className=\"justify-content-md-center\">\n                <Navbar.Brand><h1>Calendar Carousel</h1></Navbar.Brand>\n\n                <NavItem><Link to=\"/\" className=\"nav-link\">Home</Link></NavItem>\n\n                <NavItem><Link to=\"/aboutme\" className=\"nav-link\">About The Team</Link></NavItem>\n\n                <NavItem>{this.props.userName ? <h2 style={{ color: 'white' }}>Welcome: {this.props.userName}</h2> : <h2 style={{ color: 'white' }}>Please Login</h2>}</NavItem>\n\n                {this.props.userName ? <NavItem> <LogoutButton onLogout={this.props.onLogout} /></NavItem> : <NavItem> <LoginButton resGoogle={this.props.resGoogle} /></NavItem>}\n\n            </Navbar>\n        )\n\n    }\n}\n\nexport default withAuth0(Header);","import React from 'react';\nimport Button from 'react-bootstrap/Button';\nimport Card from 'react-bootstrap/Card';\nimport Form from 'react-bootstrap/Form';\n// import DateChooser from './DateChooser';\n\n\nclass AddTDItem extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      busyTime: ''\n    }\n  }\n\n  handleNumber(evt) {\n    const busyTime = (evt.target.validity.valid) ? evt.target.value : prompt('Please enter time in minutes');\n\n    this.setState({ busyTime });\n  }\n\n  // handleChange = (e) => {\n  //   e.preventDefault();\n  //   const summary = e.target.summary.value;\n  //   const location = e.target.location.value;\n  //   const description = e.target.description.value;\n  //   const startTime = e.target.startTime.value;\n  //   const endTime = e.target.endTime.value;\n  // }\n\n  handleSubmit = async  (e) => {\n    e.preventDefault();\n    let newTask = {\n      summary: (e.target.summary.value),\n      // location: (e.target.location.value),\n      description: (e.target.description.value),\n      occupation: (this.state.busyTime),\n      // start: {\n      //   dateTime: this.props.startDateTime,\n      //   timeZone: this.props.timeZone,\n      // },\n      // end: {\n      //   dateTime: this.props.endDateTime.toString(),\n      //   timeZone: this.props.timeZone,\n      // },\n    }\n    const newTaskData = await this.props.addToServer(newTask)\n    \n    let calendarApi = this.props.calendarRef.current.getApi();\n    calendarApi.addEvent({\n      id: newTaskData._id,\n      title: newTask.summary,\n      // start: new Date(newTask.start.dateTime).toISOString(),\n      // end: new Date(newTask.end.dateTime).toISOString(),\n      allDay: false\n    });\n  }\n\n  render() {\n    // onChange={this.handleChange}\n    return (\n      \n      <Form onSubmit={this.handleSubmit}>\n        <Card style={{ width: '21rem' }}>\n          <Card.Header>What's On Your List?</Card.Header>\n          <Card.Body>\n            <Form.Group>\n              <Form.Label>Task Summary</Form.Label>\n              <Form.Control type=\"text\" placeholder=\"What do you need to do?\" id=\"summary\" />\n              {/* <Form.Label>Task Location</Form.Label>\n              <Form.Control type=\"text\" placeholder=\"Where does this need to happen?\" id=\"location\" /> */}\n              <Form.Label>Task Details</Form.Label>\n              <Form.Control type=\"text\" placeholder=\"Any details to remember?\" id=\"description\" />\n              <Form.Label>How Many Minutes will this task take?</Form.Label>\n              <Form.Control placeholder=\"IN MINUTES!\" input type=\"text\" pattern=\"[0-9]*\" onInput={this.handleNumber.bind(this)} value={this.state.busyTime} />\n            </Form.Group>\n            {/* <DateChooser startDateTime={this.props.startDateTime} endDateTime={this.props.endDateTime} handleStartDateTime={this.props.handleStartDateTime}\n              handleEndDateTime={this.props.handleEndDateTime} /> */}\n\n            <Button variant=\"primary\" type=\"submit\">Add To The List!</Button>\n          </Card.Body>\n        </Card>\n      </Form>\n    );\n  }\n}\n\nexport default AddTDItem;\n","import React from 'react';\nimport Form from 'react-bootstrap/Form'\nimport Button from \"react-bootstrap/Button\";\nimport Modal from \"react-bootstrap/Modal\";\n\nclass UpdateTask extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      busyTime: ''\n    }\n  }\n\n  handleNumber(evt) {\n    const busyTime = (evt.target.validity.valid) ? evt.target.value : prompt('Please enter time in minutes');\n\n    this.setState({ busyTime });\n  }\n\n  handleSubmit = async (event) => {\n    event.preventDefault();\n    console.log('click');\n\n  \n    let calendarApi = this.props.calendarRef.current.getApi();\n    \n    let newObj = {\n      summary: (event.target.summary.value) ? event.target.summary.value : this.props.updatedObj.summary,\n      // location: (event.target.location.value)? event.target.location.value : this.props.updatedObj.location,\n      description: (event.target.description.value)? event.target.description.value : this.props.updatedObj.description,\n      // start: this.props.updatedObj._id ? this.props.updatedObj.start : {\n      //   dateTime: new Date(this.props.updatedObj.start),\n      //   timeZone: 'UTC',\n      // },\n      // end: this.props.updatedObj._id  ? this.props.updatedObj.end : {\n      //   dateTime: new Date(this.props.updatedObj.end),\n      //   timeZone: 'UTC',\n      // },\n      // allDay: !!this.props.updatedObj.allDay,\n      occupation: (event.target.time.value)? event.target.time.value : this.props.updatedObj.occupation,\n      _id: this.props.updatedObj._id\n    } \n\n    // if it's from the calendar, then add to server rather than update\n    if (newObj._id) { \n      this.props.handleUpdate(newObj) \n      let event = calendarApi.getEventById(newObj._id);\n      if (event) {\n        event.setProp('title', newObj.summary);\n      }\n    } else {\n      const newTask =  await this.props.addToServer(newObj) \n      newObj._id = newTask._id;\n      calendarApi.unselect() // clear date selection\n\n      calendarApi.addEvent({\n        id: newObj._id,\n        title: newObj.summary,\n        // start: new Date(newObj.start.dateTime).toISOString(),\n        // end: new Date(newObj.end.dateTime).toISOString(),\n        // allDay: !!newObj.allDay\n        occupation: newObj.occupation\n      });\n    }\n    \n    \n      \n    console.log(newObj);    \n    this.props.closeUpdate();\n\n    \n\n    \n    \n  }\n\n  render() {\n    return(\n      <>\n      <Modal show={this.props.showUpdate} onHide={this.props.closeUpdate}>\n      <Modal.Header closeButton />\n        <Modal.Dialog>\n          <Modal.Body>\n          <Form onSubmit={this.handleSubmit}>\n              <Form.Group className=\"mb-3\" controlId=\"exampleForm.ControlTextarea1\">\n                <Form.Label>Update Task Summary</Form.Label>\n                <Form.Control type=\"text\" defaultValue={this.props.updatedObj.summary} id=\"summary\" />\n              </Form.Group>\n              <Form.Group className=\"mb-3\" controlId=\"exampleForm.ControlTextarea1\">\n                <Form.Label>Update Task Description</Form.Label>\n                <Form.Control as=\"textarea\" rows={3} id=\"description\" defaultValue={this.props.updatedObj.description}  />\n              </Form.Group>\n              <Form.Group className=\"mb-3\" controlId=\"exampleForm.ControlTextarea1\">\n              <Form.Label>How Many Minutes will this task take?</Form.Label>\n              <Form.Control placeholder=\"IN MINUTES!\" id=\"time\" input type=\"text\" pattern=\"[0-9]*\" onInput={this.handleNumber.bind(this)} value={this.state.busyTime} />\n              </Form.Group>\n\n              <Button variant=\"primary\" type=\"submit\">Submit</Button>\n            </Form>\n          </Modal.Body>\n        </Modal.Dialog>\n        </Modal>\n      </>\n    )\n  }\n}\n\nexport default UpdateTask;\n","import React from 'react';\nimport Button from 'react-bootstrap/Button';\nimport Card from 'react-bootstrap/Card';\nimport UpdateTask from './UpdateTask';\n\n\nclass TDItems extends React.Component {\n\n  \n\n  runUpdateForm = (item) => {\n    this.props.updateformHandler(item);\n    console.log(this.props.showUpdate);\n  }\n\n  render() {\n    return (\n      <section>\n\n        <h2>Things on your List:</h2>\n         <UpdateTask showUpdate={this.props.showUpdate} closeUpdate={this.props.closeUpdate} handleUpdate={this.props.handleUpdate} updatedObj={this.props.updatedObj} addToServer={this.props.addToServer} calendarRef={this.props.calendarRef}/>\n        {this.props.toDoList ?\n          this.props.toDoList.map((tDThing) =>\n            <Card border=\"primary\" style={{ width: '30rem' }} key={tDThing._id}>\n              <Card.Body>\n                <Card.Title>{tDThing.summary}: {tDThing.occupation} minutes</Card.Title>\n                <Card.Text>\n                  <p>Details: {tDThing.description} </p>\n\n                   {/* <p>Location: {tDThing.location}</p>\n                   <p>Start Time: {tDThing.start ? tDThing.start.dateTime : 'N/A'} </p>\n                   <p>End Time: {tDThing.end ? tDThing.end.dateTime : 'N/A'}</p> */}\n\n                  {/* <p>Location: {tDThing.location}</p> */}\n                  {/* <p>Start Time: {tDThing.start.dateTime} </p>\n                  <p>End Time: {tDThing.end.dateTime}</p> */}\n\n\n                </Card.Text>\n                <Button variant=\"success\" onClick={() => { this.props.deleteToDo(tDThing._id) }}>Done!</Button>\n\n                <Button variant=\"secondary\" onClick={() => { this.runUpdateForm(tDThing) }}>Edit</Button>\n\n                {/* <Button variant=\"primary\" onClick={() => { this.props.ADDTOCALENDARFUNCTION(tDThing._id) }}>Add To Calendar</Button> */}\n              </Card.Body>\n\n            </Card>\n          ) : ''\n        }\n\n        <Card >\n          <Card.Header>Sample Task</Card.Header>\n          <Card.Body>\n            <Card.Title>Add Your To Do List!</Card.Title>\n            <Card.Text>\n              You can add To-Do List items, check them off, edit them, or even add them to your Google Calendar! Get started by entering something in the table to the left.\n            </Card.Text>\n          </Card.Body>\n        </Card>\n        <br />\n\n      </section >\n    );\n  }\n}\n\n\nexport default TDItems;\n","import React from 'react';\nimport { Doughnut } from 'react-chartjs-2';\n// TO DO:\n// Total Time/60 Minutes = How many data elements. Populate this table with 1's\n// Proportion of time per tasks/total time goes into the second selector\n\nclass Starburst extends React.Component {\n\n  kitKat = () => {\n    // This one adds a Free Time Element to the array\n    const array = this.props.toDoList.map((tDThing) => tDThing.summary);\n    array.push('Free Time!');\n    return array;\n  }\n\n  rolos = () => {\n    // This one figures out the amount of leftover hour time for Free Time\n    const array = this.props.toDoList.map((tDThing) => tDThing.occupation);\n\n    let minutos = 0;\n\n    for (let i = 0; i < array.length; i++) {\n      minutos += array[i];\n    }\n    console.log(minutos);\n    console.log(minutos % 60);\n    console.log(60 - (minutos % 60));\n    let remainder = 60 - (minutos % 60);\n\n    remainder = 60 ? '' : array.push(remainder);\n    console.log(remainder);\n    return array;\n  }\n\n  twix = () => {\n    // This one makes the amount of inner circles for hours\n    const array = this.props.toDoList.map((tDThing) => tDThing.occupation);\n\n    let minutos = 0;\n\n    for (let i = 0; i < array.length; i++) {\n      minutos += array[i];\n    }\n\n    let horas = Math.ceil(minutos / 60);\n\n    let progress = [];\n    for (let i = 0; i < horas; i++) {\n      progress.push(1);\n    }\n    return progress;\n  }\n\n  updateEverything = () => {\n    this.everything = {\n      labels: this.kitKat(),\n      datasets: [\n        {\n          label: 'Tasks in Hours',\n          data: this.rolos(),\n          backgroundColor: [\n            'rgba(75, 192, 192, 0.2)',\n            'rgba(153, 102, 255, 0.2)',\n            'rgba(255, 159, 64, 0.2)',\n            'rgba(255, 99, 132, 0.2)',\n            'rgba(54, 162, 235, 0.2)',\n            'rgba(255, 206, 86, 0.2)',\n\n          ],\n          borderColor: [\n            'rgba(75, 192, 192, 1)',\n            'rgba(153, 102, 255, 1)',\n            'rgba(255, 159, 64, 1)',\n            'rgba(255, 99, 132, 1)',\n            'rgba(54, 162, 235, 1)',\n            'rgba(255, 206, 86, 1)',\n          ],\n          borderWidth: 1,\n        },\n        {\n          label: 'Time in Hours',\n          data: this.twix(),\n          backgroundColor: [\n            'rgba(255, 99, 132, 0.2)',\n            'rgba(54, 162, 235, 0.2)',\n            'rgba(255, 206, 86, 0.2)',\n            'rgba(75, 192, 192, 0.2)',\n            'rgba(153, 102, 255, 0.2)',\n            'rgba(255, 159, 64, 0.2)',\n          ],\n          borderColor: [\n            'rgba(255, 99, 132, 1)',\n            'rgba(54, 162, 235, 1)',\n            'rgba(255, 206, 86, 1)',\n            'rgba(75, 192, 192, 1)',\n            'rgba(153, 102, 255, 1)',\n            'rgba(255, 159, 64, 1)',\n          ],\n          borderWidth: 1,\n        },\n      ],\n\n    };\n  }\n\n\n  everything = {\n    labels: this.kitKat(),\n    datasets: [\n      {\n        label: 'Tasks in Hours',\n        data: this.rolos(),\n        backgroundColor: [\n          'rgba(75, 192, 192, 0.2)',\n          'rgba(153, 102, 255, 0.2)',\n          'rgba(255, 159, 64, 0.2)',\n          'rgba(255, 99, 132, 0.2)',\n          'rgba(54, 162, 235, 0.2)',\n          'rgba(255, 206, 86, 0.2)',\n\n        ],\n        borderColor: [\n          'rgba(75, 192, 192, 1)',\n          'rgba(153, 102, 255, 1)',\n          'rgba(255, 159, 64, 1)',\n          'rgba(255, 99, 132, 1)',\n          'rgba(54, 162, 235, 1)',\n          'rgba(255, 206, 86, 1)',\n        ],\n        borderWidth: 1,\n      },\n      {\n        label: 'Time in Hours',\n        data: this.twix(),\n        backgroundColor: [\n          'rgba(255, 99, 132, 0.2)',\n          'rgba(54, 162, 235, 0.2)',\n          'rgba(255, 206, 86, 0.2)',\n          'rgba(75, 192, 192, 0.2)',\n          'rgba(153, 102, 255, 0.2)',\n          'rgba(255, 159, 64, 0.2)',\n        ],\n        borderColor: [\n          'rgba(255, 99, 132, 1)',\n          'rgba(54, 162, 235, 1)',\n          'rgba(255, 206, 86, 1)',\n          'rgba(75, 192, 192, 1)',\n          'rgba(153, 102, 255, 1)',\n          'rgba(255, 159, 64, 1)',\n        ],\n        borderWidth: 1,\n      },\n    ],\n\n  };\n\n  render() {\n    return (\n      <>\n        <div className='header'>\n          <h1 className='title'>Your Time: Visualized</h1>\n          <p className='inner'>The Inner Ring Shows How Many Hours OF Work You Have Ahead</p>\n          <p className='outer'>The Outer Ring Shows How Your Tasks Compare to Your Time</p>\n        </div>\n        <Doughnut data={this.everything} />\n      </>\n\n    );\n  }\n\n  componentDidUpdate() {\n    this.updateEverything();\n  }\n}\nexport default Starburst;\n","import React from 'react'\nimport FullCalendar from '@fullcalendar/react' // must go before plugins\nimport dayGridPlugin from '@fullcalendar/daygrid' // a plugin!\nimport timeGridPlugin from '@fullcalendar/timegrid'\nimport interactionPlugin from '@fullcalendar/interaction' // needed for dayClick\nimport googleCalendarPlugin from '@fullcalendar/google-calendar';\nimport UpdateTask from './UpdateTask';\n\nclass Calendar extends React.Component {\n\n  state = {\n    weekendsVisible: true,\n    currentEvents: [],\n  }\n\n  calendarRef = React.createRef();\n\n  calendar = {\n    plugins: [googleCalendarPlugin],\n    googleCalendarApiKey: 'AIzaSyCV81aGBz0ZSJjUpP1k7R8UvwQrt7sSqxk', // Console API_KEY here\n    events: {\n      googleCalendarId: this.props.googleState.email,\n      className: 'gcal-event' // an option!\n    }\n  }\n\n  constructor(props) {\n    super(props);\n    this.props.updateCalendarRef(this.calendarRef);\n  }\n\n  \n\n  runUpdateForm = (item) => {\n    this.props.updateformHandler(item);\n    console.log(this.props.showUpdate);\n  }\n\n  render() {\n    return (\n      <div className='demo-app'>\n        {this.renderSidebar()}\n        <div className='demo-app-main'>\n          <FullCalendar\n            plugins={[dayGridPlugin, timeGridPlugin, interactionPlugin, googleCalendarPlugin]}\n            googleCalendarApiKey={this.calendar.googleCalendarApiKey}\n            events={this.calendar.events}\n            headerToolbar={{\n              left: 'prev,next today',\n              center: 'title',\n              right: 'dayGridMonth,timeGridWeek,timeGridDay'\n            }}\n            initialView='dayGridMonth'\n            editable={true}\n            selectable={true}\n            selectMirror={true}\n            dayMaxEvents={true}\n            weekends={this.state.weekendsVisible}\n            select={this.handleDateSelect}\n            eventContent={renderEventContent} // custom render function\n            eventClick={this.handleEventClick}\n            eventsSet={this.handleEvents} // called after events are initialized/added/changed/removed\n            eventDisplay='block'\n            themeSystem='standard'\n\n            ref={this.calendarRef}\n            /* you can update a remote database when these fire:\n            eventAdd={function(){}}\n            eventChange={function(){}}\n            eventRemove={function(){}}\n            */\n\n          />\n        </div>\n        <UpdateTask showUpdate={this.props.showUpdate} closeUpdate={this.props.closeUpdate} handleUpdate={this.props.handleUpdate} updatedObj={this.props.updatedObj} addToServer={this.props.addToServer} calendarRef={this.calendarRef}/>\n        {/* {this.props.toDoList ? this.initializeEvents() : ''} */}\n      </div>\n    )\n  }\n\n  renderSidebar() {\n    return (\n      <div className='demo-app-sidebar'>\n        <div className='demo-app-sidebar-section'>\n          <h2>Instructions</h2>\n          <ul>\n            <li>Make your personal calendar public: <a href='https://support.google.com/calendar/answer/37083?hl=en'>Click Here!</a></li>\n            <li>Select dates and you will be prompted to create a new event</li>\n            <li>Drag, drop, and resize events</li>\n            <li>Click an event to see it on your Google Calendar</li>\n          </ul>\n        </div>\n        <div className='demo-app-sidebar-section'>\n        </div>\n      </div>\n    )\n  }\n\n  handleWeekendsToggle = () => {\n    this.setState({\n      weekendsVisible: !this.state.weekendsVisible\n    })\n  }\n\n  handleDateSelect = (selectInfo) => {\n    this.runUpdateForm(selectInfo);\n  }\n\n  handleEventClick = (clickInfo) => {\n    if (`Are you sure you want to delete the event '${clickInfo.event.title}'`) {\n      // clickInfo.event.remove()\n    }\n  }\n\n  handleEvents = (events) => {\n    this.setState({\n      currentEvents: events\n    })\n  }\n\n  // initializeDB = () => {\n  //   this.props.toDoList ? this.props.toDoList.forEach((element) {\n  //     this.calendarRef.addEvent((element) => {\n  //       id:\n  //     }\n  // }\n\n}\n\nfunction renderEventContent(eventInfo) {\n  return (\n    <>\n      <b>{eventInfo.timeText}: </b>\n      <i>{eventInfo.event.title}</i>\n    </>\n  )\n}\n\n// function renderSidebarEvent(event) {\n//   return (\n//     <li key={event.id}>\n//       <b>{formatDate(event.start, { year: 'numeric', month: 'short', day: 'numeric' })}</b>\n//       <i>{event.title}</i>\n//     </li>\n//   )\n// }\n\nexport default Calendar;\n","import React from 'react';\nimport { Container, Row, Col } from 'react-bootstrap';\nimport AddTDItem from './AddTDItem';\nimport TDItems from './TDItems';\nimport Starburst from './Starburst';\nimport Calendar from './Calendar';\n\nclass Main extends React.Component {\n\n  render() {\n    return (\n      <>\n        <Container fluid>\n          {/* <Row>\n            <Col justify-content-md-center><h1>Your To Do List! </h1></Col>\n          </Row> */}\n          <br></br>\n          <br></br>\n          <Row>\n            <Col md=\"auto\">\n\n              <AddTDItem\n                addToServer={this.props.addToServer}\n                timeZone={this.props.timeZone}\n                 calendarRef={this.props.calendarRef}\n              // startDateTime={this.props.startDateTime} \n              // endDateTime={this.props.endDateTime}\n              // handleStartDateTime={this.props.handleStartDateTime} \n              // handleEndDateTime={this.props.handleEndDateTime} \n              />\n\n            </Col>\n            <Col>\n              <TDItems toDoList={this.props.toDoList} deleteToDo={this.props.deleteToDo} handleUpdate={this.props.handleUpdate} updateformHandler={this.props.updateformHandler}\n                  closeUpdate={this.props.closeUpdate}\n                  updatedObj={this.props.updatedObj}\n                  showUpdate={this.props.showUpdate}\n                  addToServer={this.props.addToServer}\n                  calendarRef={this.props.calendarRef}/>\n            </Col>\n            <Col style={{ width: '20rem' }}>\n              <Starburst toDoList={this.props.toDoList} getEventsServer={this.props.getEventsServer}/>\n            </Col>\n          </Row>\n        </Container>\n        <Calendar googleState={this.props.googleState} deleteToDo={this.props.deleteToDo} \n        handleUpdate={this.props.handleUpdate} updateformHandler={this.props.updateformHandler} \n        showUpdate={this.props.showUpdate} updatedObj={this.props.updatedObj}\n        closeUpdate={this.props.closeUpdate}\n        updateCalendarRef={this.props.updateCalendarRef}\n        calendarRef={this.props.calendarRef}\n        addToServer={this.props.addToServer}\n        toDoList={this.props.toDoList} />\n      </>\n    );\n  }\n}\n\nexport default Main;\n","export default __webpack_public_path__ + \"static/media/Chris.b5ce3204.jfif\";","export default __webpack_public_path__ + \"static/media/Jae.c4ac4c79.jpg\";","export default __webpack_public_path__ + \"static/media/Anthony.0703aab8.jpg\";","import React from 'react';\n\nimport { Container } from 'react-bootstrap';\nimport Image from 'react-bootstrap/Image';\nimport Chris from './headshots/Chris.jfif';\nimport Jae from './headshots/Jae.jpg';\nimport Anthony from './headshots/Anthony.jpg';\n\n\n\nclass AboutMe extends React.Component {\n  render() {\n    return (\n      <>\n        <Container>\n          <h1>About the Creators:</h1>\n\n          <div className=\"card mb-1\" style={{ width: '70rem' }}>\n            <div className=\"row no-gutters\">\n              <div className=\"col-md-2 \">\n                <Image style={{ width: '100%' }} src={Chris} rounded />\n              </div>\n              <div className=\"col-md-10\">\n                <div>\n                  <h5 >Chris Rarig</h5>\n                  <p className=\"text-center\">\n                  I am a Software Engineer with a Business Analytics background. After experiencing the problem-solving capabilities of Python coding through my work at Zillow I decided on a career change. That brought me here to Code Fellows. During my time at Code Fellows, I plan to learn the methods and capabilities of Python. After graduating I hope to begin a career in Software Engineering working in a fast-paced environment where I am constantly being challenged and learning from my peers.\n                  </p>\n                </div>\n              </div>\n            </div>\n          </div>\n          <div className=\"card mb-1\" style={{ width: '70rem' }}>\n            <div className=\"row no-gutters\">\n\n              <div className=\"col-md-10\">\n                <div >\n                  <h5 className=\"text-end\">Jae Loney</h5>\n                  <p className=\"text-center\">\n                     Jae is a Software Developer with experience in Project Management and Accounts Management who loves learning, solving problems, and organizing teams. Jae enjoys working with Javascript in both front-end and back-end applications and hopes to use their skills to bring websites to life with people who are working to change the world for the better. In the unlikely event of having free time, Jae loves exploring New York City (and anywhere else they can get to!), writing, and performing Sketch Comedy.\n                  </p>\n                </div>\n              </div>\n              <div className=\"col-md-2 \">\n                <Image style={{ width: '100%' }} src={Jae} rounded />\n              </div>\n            </div>\n          </div>\n\n          <div className=\"card mb-1\" style={{ width: '70rem' }}>\n            <div className=\"row no-gutters\">\n              <div className=\"col-md-2 \">\n                <Image style={{ width: '100%' }} src={Anthony} rounded />\n              </div>\n              <div className=\"col-md-10\">\n                <div >\n                  <h5>Anthony Turinski</h5>\n                  <p className=\"text-center\">\n                    Anthony is an aspiring Software Developer with a background in odd jobs. He believes the ultimate goal of technology should be to reduce humanity’s collective burden. Just like how the refrigerator solved food spoilage and the washing machine freed up hours of scrubbing, he wants to build programs that free people from their chains of labor.\n                  </p>\n                </div>\n              </div>\n            </div>\n          </div>\n\n\n        </Container >\n      </>\n    )\n  }\n}\n\nexport default AboutMe;\n","export default __webpack_public_path__ + \"static/media/ToDoPlus.b58ffb1f.png\";","import React from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { withAuth0 } from '@auth0/auth0-react';\nimport Header from './Header';\nimport Main from './Components/Main'\nimport AboutMe from './Components/AboutMe'\nimport ToDoPlus from './ToDoPlus.png';\nimport Image from 'react-bootstrap/Image';\n\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route\n} from \"react-router-dom\";\nimport axios from 'axios';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      user: null,\n      google: [],\n      accessToken: '',\n      timeZone: '',\n      startDateTime: Date(),\n      endDateTime: Date(),\n      toDoList: [],\n      showUpdate: false,\n      updateForm: false,\n      updatedObj:{},\n      calendarRef: null\n    }\n  }\n\n  URL = process.env.URL;\n\n  handleStartDateTime = (date) => {\n    this.setState({ startDateTime: date });\n    console.log(this.state.startDateTime);\n  }\n\n  handleEndDateTime = (date) => {\n    this.setState({ endDateTime: date });\n    console.log(this.state.endDateTime);\n  }\n\n  resGoogle = (res) => {\n    console.log(res);\n    this.setState({ accessToken: res.tokenObj.access_token });\n    this.setState({ google: res.profileObj })\n    console.log(this.state.google);\n    // this.getEventsAPI();\n  }\n\n\n  onLogout = () => {\n    this.setState({ accessToken: '' });\n    this.setState({ google: [] })\n  }\n\n  updateformHandler = (itemObj) => {\n    this.setState({\n      showUpdate: true,\n      updateForm: true,\n      updatedObj: itemObj,\n    })\n    console.log(itemObj);\n  }\n\n  closeUpdate = () => {\n    this.setState({\n      showUpdate: false,\n    })\n  }\n\n  updateCalendarRef = (ref) => {\n    this.setState({\n      calendarRef: ref\n   });\n }\n  // getEventsAPI = async () => {\n  //   // This function here is pulling things fromt he API NOT the server\n  //   let URL = `https://www.googleapis.com/calendar/v3/calendars/primary/events`\n  //   let config = {\n  //     headers: { \"Authorization\": `Bearer ${this.state.accessToken}` }\n  //   }\n  //   try {\n  //     let eventData = await axios.get(URL, config);\n\n  //     this.setState({\n  //       timeZone: eventData.data.timeZone\n  //     });\n  //     // eventData.data.items.map((events, idx) =>{\n  //     //   let eachTask = {\n  //     //     summary: events.summary,\n  //     //     location: events.location,\n  //     //     description: events.description,\n  //     //     start: events.start,\n  //     //     end: events.end\n  //     //   }\n  //     //   this.state.toDoList.push(eachTask);\n  //     //   return this.state.toDoList;\n\n  //     // })\n  //     console.log(this.state.toDoList);\n  //     console.log(this.state.timeZone);\n  //   }\n  //   catch (err) {\n  //     console.log('there was an error with the API get', err);\n  //   }\n  // }\n\n  getEventsServer = async () => {\n    //THIS NEEDS TO BE UPDATED BEFORE DEPLOYING!!!!!\n    let url = URL;\n    axios.get(url)\n      .then(eventObj => eventObj.data)\n      .then(data => this.setState({ toDoList: data }))\n      .catch(error => console.log('error', error.message));\n  }\n\n  // getFromServer =?email=${this.state.google.email}\n\n  addToServer = async (TDThing) => {\n    let newTask = await axios.post(URL, TDThing);\n    this.setState({ toDoList: [...this.state.toDoList, newTask.data] })\n    // this.getEventsAPI();\n    this.getEventsServer();\n    console.log('newTask', newTask.data);\n    return newTask.data;\n  }\n\n  handleUpdate = async (event) => {\n    let url = `${URL}/${event._id}`;\n\n    let putObj = {\n      summary: event.summary,\n      location: event.location,\n      description: event.description,\n      occupation: event.occupation,\n      start: {\n        dateTime: event.dateTime,\n        timeZone: event.timeZone,\n      },\n      end: {\n        dateTime: event.dateTime,\n        timeZone: event.timeZone,\n      },\n\n\n    }\n    let updatedTask = await axios.put(url, putObj);\n    console.log(updatedTask);\n    // let updatedData = updatedEvent.data;\n    // let copyState = this.state.thDoList.map((event, idx) => {\n    //   if(event._id === updatedData._id) return updatedData;\n    //   else {return event};\n    // })\n    // this.setState({\n    //   toDoList: copyState\n    // })\n    this.getEventsServer();\n  }\n\n  deleteFromServer = async (passedId) => {\n    console.log('click');\n    let deletedEvent = await axios.delete(`${URL}/${passedId}`);\n    console.log(passedId);\n    let deletedEventData = deletedEvent.data\n    console.log(deletedEventData);\n    let copyState = this.state.toDoList\n    let filteredEvents = copyState.filter((item) => item._id !== deletedEventData._id);\n    this.setState({ toDoList: filteredEvents });\n    // this.getEventsAPI(); STRETCH GOAL TO DELETE OFF OF GOOGLE CALENDAR\n    // this.getEventsServer();\n    let calendarApi = this.state.calendarRef.current.getApi();\n    let event = calendarApi.getEventById(passedId);\n    if (event) {\n      event.remove();\n    }\n  }\n\n  componentDidMount() {\n    // this.getEventsAPI();\n    this.getEventsServer();\n  }\n\n  render() {\n\n    return (\n      <>\n\n\n        <Router>\n\n          <Header resGoogle={this.resGoogle} onLogout={this.onLogout} userName={this.state.google.name} />\n\n\n\n          <Switch>\n            <Route exact path=\"/\">\n\n              {this.state.google.name ?\n                <Main\n                  handleUpdate={this.handleUpdate}\n                  deleteToDo={this.deleteFromServer}\n                  addToServer={this.addToServer}\n                  toDoList={this.state.toDoList}\n                  timeZone={this.state.timeZone}\n                  getEventsServer={this.getEventsServer}\n                // startDateTime={this.state.startDateTime}\n                // endDateTime={this.state.endDateTime}\n                // handleEndDateTime={this.handleEndDateTime}\n                // handleStartDateTime={this.handleStartDateTime}\n                  updateformHandler={this.updateformHandler}\n                  closeUpdate={this.closeUpdate}\n                  updatedObj={this.state.updatedObj}\n                  showUpdate={this.state.showUpdate}\n                  googleState={this.state.google}\n                  calendarRef={this.state.calendarRef}\n                  updateCalendarRef={this.updateCalendarRef}\n\n                /> : \"\"}\n                 {this.state.google.name ? \"\" : <Image fluid src={ToDoPlus} />}\n            </Route>\n            <Route exact path=\"/aboutme\">\n              <AboutMe />\n            </Route>\n          </Switch>\n        </Router>\n\n\n      </>\n    )\n  }\n}\n\nexport default withAuth0(App);\n","\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { Auth0Provider } from \"@auth0/auth0-react\";\n\nReactDOM.render(\n  <Auth0Provider\n  domain=\"dev-45qyrjq6.us.auth0.com\" //These are in your account\n  clientId=\"pRjhN1OdQnQx15HNORpVpzYQH652giBd\" //In account\n  redirectUri={window.location.origin}\n>\n<script src=\"https://apis.google.com/js/platform.js\" async defer></script>\n<script src=\"https://apis.google.com/js/api.js\" type=\"text/javascript\"></script>\n    <App />\n  </Auth0Provider>,\n  document.getElementById('root')\n);"],"sourceRoot":""}